package br.com.saraiva.utils;

import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;

import br.com.saraiva.combinacoes.Combinacao;

public class NovoGeradorDeCombinacoes {

	public static void main(String[] args) {

		System.out.println("Novo gerador com tudo o que já sabemos!");
		
		if (args.length < 2) {
			System.out.println("Uso: java br.com.saraiva.utils.NovoGeradorDeCombinacoes <numero de dezenas por combinacao> <arquivo com dezenas a combinar>");
			System.exit(1);
		}

		int dezenasPorCombinacao = Integer.parseInt(args[0]);
		
		String strDezenas = Utils.leConteudoArquivo(args[1]);
		
		String[] dezenas = strDezenas.trim().replaceAll("\n","").replaceAll("\r", "").split(" ");
		
		if (!(dezenasPorCombinacao < dezenas.length)) {
			System.out.println("O número de dezenas por combinação tem que ser "
					+ "menor que o numero de dezenas a combinar!");
			System.exit(1);
		}

		Chronometer.start();
		
		Map<Integer, String> mapa = new HashMap<Integer, String>();
		
		double combs = Combinacao.combinacao(dezenas.length, dezenasPorCombinacao);
		System.out.printf("Combinacao(%1d, %2d)=Combinacao(%1d, %3d)=[%f]", dezenas.length, dezenasPorCombinacao, (dezenas.length - dezenasPorCombinacao), combs);

		geradorDeCombinacoes(dezenas, mapa, dezenasPorCombinacao);

		Chronometer.stop();
		
		if (Chronometer.time() <= 1000) {
			System.out.println("Tempo de Processamento:[" + Chronometer.time() + " ms]");
		} else if (Chronometer.stime() <= 60) {
			System.out.println("Tempo de Processamento:[" + Chronometer.stime() + " s]");
		} else {
			System.out.println("Tempo de Processamento:[" + Chronometer.mtime() + " m]");
		}
		
		System.exit(0);
		
	}

	private static String geraNomeArquivo(int dezenasPorCombinacao,
			SimpleDateFormat sdf) {
		return "C:\\temp\\" + dezenasPorCombinacao + "_COMBINACOES_" + sdf.format(GregorianCalendar.getInstance().getTime()) + ".txt";
	}

	private static void geradorDeCombinacoes(String[] dezenas,
			Map<Integer, String> mapa, int dezenasPorCombinacao) {
		int profundidade = (dezenas.length - dezenasPorCombinacao) >= (dezenas.length / 2) ? dezenasPorCombinacao : dezenas.length - dezenasPorCombinacao;  

		mapa = gerarCombinacoes(dezenas, mapa, profundidade);

		if (dezenasPorCombinacao != profundidade) {
			mapa = gerarComplementares(mapa, dezenas);
		}
		
		Utils.imprimeMapa(mapa);
		
		Utils.gravaMapaEmArquivo(mapa, geraNomeArquivo(dezenasPorCombinacao, new SimpleDateFormat("yyyyMMddHHmm")));
		
	}

	private static Map<Integer, String> gerarComplementares(
			Map<Integer, String> mapa, String[] dezenas) {
		
		Map<Integer, String> newmapa = new HashMap<Integer, String>();
		
		for (Integer key : mapa.keySet()) {
			String combinacao = mapa.get(key);
			StringBuilder sb = new StringBuilder();
			for (String dezena : dezenas) {
				if (combinacao.indexOf(dezena) < 0) {
					sb.append(dezena).append(" ");
				}
			}
			newmapa.put(sb.toString().trim().hashCode(), sb.toString().trim());
		}

		return newmapa;
	}

	private static Map<Integer, String> gerarCombinacoes(String[] dezenas,
			Map<Integer, String> mapa, int profundidade) {
		for (int i = 0; i < profundidade; i++) {
			mapa = gerar(mapa, dezenas);
		}
		return mapa;
	}

	private static Map<Integer, String> gerar(Map<Integer, String> mapa,
			String[] dezenas) {

		Map<Integer, String> newmapa = new HashMap<Integer, String>();

		if (mapa.size() == 0) {
			for (String dezena : dezenas) {
				Integer hash = dezena.hashCode();
				newmapa.put(hash, dezena);
			}
			return newmapa;
		}

		for (Integer key : mapa.keySet()) {
			String aux = mapa.get(key);
			for (String dezena : dezenas) {
				if (aux.indexOf(dezena) >= 0) {
					continue;
				} else {
					String novaCombinacao = aux.concat(" ").concat(dezena);
					int[] iDezenas = Utils.toIntArraySorted(novaCombinacao);
					String str = Utils.toStr(iDezenas);
					newmapa.put(str.hashCode(), str);
				}
			}
		}

		return newmapa;
	}

}
