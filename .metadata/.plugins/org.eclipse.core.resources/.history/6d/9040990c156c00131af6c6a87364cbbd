package br.com.saraiva.utils;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import br.com.saraiva.combinacoes.Combinacao;

public class Util {

	public static void main(String[] args) {
		
		int p = 7, n = 4;
		
		System.out.println("Combinacao(n:[" + p +"], p:[" + n + "]_:[" + Combinacao.combinacao(p, n) + "]");

		Integer[] dezenasEscolhidas = { 1, 2, 3, 4, 5, 6, 7 };

		List<Integer[]> listaInicial = new ArrayList<Integer[]>();

		for (int i = 0; i < dezenasEscolhidas.length; i++) {
			for (int j = i + 1; j < dezenasEscolhidas.length; j++) {
				Integer[] x = { dezenasEscolhidas[i], dezenasEscolhidas[j] };
				listaInicial.add(x);
			}
		}

		int profundidade = 4;
		List<Integer[]> listaSemRepetidos = null;
		
		for (int i = 0; i < profundidade - 2; i++) {

			List<Integer[]> m = geraListaDeCombinacoes(dezenasEscolhidas, listaInicial);
			
			listaSemRepetidos = eliminaRepeticoes(m);
			
			listaInicial = listaSemRepetidos;
			
		}

		for (Integer[] integers : listaSemRepetidos) {
			for (int i = 0; i < integers.length; i++) {
				System.out.print(integers[i] + " ");
			}
			System.out.println();
		}

	}

	private static boolean achou(List<Integer[]> lista, Integer[] item,
			int posicao) {

		String procurada = "";
		for (int i = 0; i < item.length; i++) {
			procurada = procurada.concat(String.valueOf(item[i])).concat("-");
		}
		//System.out.println("Procurada:[" + procurada + "]");

		String aux = null;

		int posAtual = 0;

		for (Integer[] inteiros : lista) {

			if (posAtual > posicao) {
				posAtual++;
				continue;
			}

			aux = new String();
			for (int i = 0; i < inteiros.length; i++) {
				aux = aux.concat(String.valueOf(inteiros[i])).concat("-");
			}

			if (procurada.equals(aux))
				return true;

		}

		return false;
	}

	private static boolean contemRepeticoes(Integer[] meuarray) {

		for (int i = 0; i < meuarray.length - 1; i++) {
			for (int j = i + 1; j < meuarray.length; j++) {
				if (meuarray[i] == meuarray[j]) {
					return true;
				}
			}
		}

		return false;

	}

	private static List<Integer[]> eliminaRepeticoes(
			List<Integer[]> listaOriginal) {

		List<Integer[]> semRepeticoes = new ArrayList<Integer[]>();

		for (int i = 0; i < listaOriginal.size() - 1; i++) {
			if (!achou(semRepeticoes, listaOriginal.get(i), 0)
					&& !contemRepeticoes(listaOriginal.get(i))) {
				semRepeticoes.add(listaOriginal.get(i));
			}
		}

		return semRepeticoes;

	}

	public static List<Integer[]> geraListaDeCombinacoes(
			Integer[] numerosEscolhidos, List<Integer[]> combinacoesAuxiliares) {

		List<Integer[]> novaListaDeCombinacoes = new ArrayList<Integer[]>();

		for (int i = 0; i < numerosEscolhidos.length; i++) {

			for (int j = 0; j < combinacoesAuxiliares.size(); j++) {

				Integer[] combinacaoAtual = combinacoesAuxiliares.get(j);

				int tamanho = combinacaoAtual.length + 1;

				Integer[] novaCombinacao = new Integer[tamanho];

				novaCombinacao[0] = numerosEscolhidos[i];

				for (int k = 0; k < combinacaoAtual.length; k++) {

					novaCombinacao[k + 1] = combinacaoAtual[k];

				}

				Arrays.sort(novaCombinacao);

				novaListaDeCombinacoes.add(novaCombinacao);
			}

		}

		return novaListaDeCombinacoes;

	}

}
